title:: Creating Named Groups
summary:: Organize alternative groups of elements in an MKtl for particular purposes
categories:: Libraries>Modality, Tutorials
related:: Overviews/Modality, Classes/MKtl, Classes/MKtlElement, Classes/MKtlElementGroup, Reference/MKtl_description_files

section:: Background
MKtl objects contain a hierarchical organisation of their interaction elements in MKtl.elementsGroup. This group contains and defines every element once, and one can access every element directly by its element key, or by its hierarchical address. At times multiple ways of grouping and naming these elements make sense, and MKtl supports multiple such orders.

The examples below show that for two simple cases.

section:: Examples
code::
// make a nanokontrol2
n = MKtl(\nk, "korg-*ol2");
n.gui;
n.trace;

// the logical organization of elements and their direct names:
n.postElements;


// it contains five transport buttons in a group called \tr:
n.elementGroup;
n.elAt(\tr);

// as these buttons are unique and have names,
//they could also be accessible by that name directly:
n.elAt(\tr, \play);
// not there yet -
n.elAt(\play);
// add them to namedDict
n.elAt(\tr, [\play, \stop, \rew, \fwd, \rec]).do { |el| n.addNamed(el.elemDesc.key, el); };
n.namedDict.keys;
// and now this access works:
n.elAt(\stop);
::

The nanokontrol is actually structured like a mixer, so rather than grouping sliders, knobs and buttons in separate groups, one could also make a group of each of the 8 mixer channels, with each containing a knob, a slider and 3 buttons.

code::

(
// nested - the top group is \mix,
y = MKtlElementGroup(\mix, n,
	8.collect { |i|
		// inner group is a list of 8 channels, index 0-7
		MKtlElementGroup(i, n,
			// note the assocs which are needed for access by name later!
			[ 	\kn -> n.elAt(\kn, i),
				\sl -> n.elAt(\sl, i),
				\bt_S -> n.elAt(\bt, 0, i),
				\bt_M -> n.elAt(\bt, 1, i),
				\bt_R -> n.elAt(\bt, 2, i)
			]
		)
	};
);
n.addNamed(\mix, y);
)

// access variants
n.elAt(\mix);
// index 0 is channel 1...
n.elAt(\mix, 0, 0);
n.elAt(\mix, 0, \bt_R);
n.elAt(\mix, 0, \bt_R);

// same example, but make symbolic names for the channels as well,
// and put the buttons in a nested group
(
y = MKtlElementGroup(\mix, n,
	8.collect { |i|
		var chanName = ("ch_" ++ (i + 1)).asSymbol;
		chanName -> MKtlElementGroup(chanName, n,
			[ 	\kn -> n.elAt(\kn, i),
				\sl -> n.elAt(\sl, i),

				\bt -> MKtlElementGroup(\bt, n,
					[\S, \M, \R].collect { |key|
						key -> n.elAt(\bt, key, i)
					}
				)
			]
		)
	};
);
n.addNamed(\mix, y);
)

// access variants
n.namedDict[\mix];
n.elAt(\mix);

// and now access by name and index works at every level:
n.elAt(\mix, 'ch_1');
n.elAt(\mix, 0);
n.elAt(\mix, 'ch_1', \bt);
n.elAt(\mix, 'ch_1', \bt, \S);
n.elAt(\mix, 'ch_1', \bt, 0);
n.elAt(\bt, 0, 0);
::
