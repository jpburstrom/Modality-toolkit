title:: Creating Presets for MKtl Element Values
summary:: store sets of element values as state, and reuse them later
categories:: Libraries>Modality, External Control
related:: Overviews/Modality, Classes/MKtl, Classes/MKtlElement



MKtl has simple ways to get and set multiple element values at once.
This functionality can be use to create simple presets of sets of MKtl element values to set them to desired states.

Section:: Example 1
Making simple preset functions and saving them by hand.

code::
// make an MKtl
g = MKtl(\gp, "*run*drive");
g.gui.parent.alwaysOnTop_(true);
// get current settings of all controllers:
~pre0 = g.getKeysValues;

// get some values only by name:
g.getKeysValues([\joy_l_x, \joy_l_y]);

// create sets of names to use in preset
~joyKeys = g.elementAt(\joy).flat.collect(_.name);
~butKeys = g.elementAt(\bt).collect(_.name);


// create some random settings:
g.elementsDict.do(_.value_(1.0.rand));
~rnd1 = g.getKeysValues;
g.elementsDict.do(_.value_(1.0.rand));
~rnd2 = g.getKeysValues;

// make random settings for smaller sets of keys only
~joyKeys.do { |key| g.dictAt(key).value_(1.0.rand) };
~rndJoy1 = g.getKeysValues(~joyKeys);

~butKeys.do { |key| g.dictAt(key).value_(1.0.rand) };
~rndBut1 = g.getKeysValues(~butKeys);

// restore to initial setting
g.setKeysValues(~pre0);

// give all elements an action,
// then set states with doAction
g.elementGroup.action_ { |el| "YO: % %\n".postf(el.name, el.value) };

// set to one of them
g.setKVAction([~pre0, ~rnd1, ~rnd2, ~rndBut1, ~rndJoy1].choose);

::


Section:: Example 2
Using addHalo/getHalo (in JITLibExtensions) allows
a very self-contained way of working with presets:

code::

g.addHalo(\allKeys, g.getKeysValues.flop[0]);
g.getHalo(\allKeys);
g.addHalo(\presets, ());
g.getHalo(\presets);

g.addHalo(\storeAll, { g.getHalo.postcs });

g.addHalo(\storeAll, { |halo, name| halo.presets.put(name, g.getKeysValues) });

g.getHalo.storeAll(\base);

// create sets of names to use in preset
g.addHalo(\joyKeys, g.elementAt(\joy).flat.collect(_.name));
g.addHalo(\butKeys, g.elementAt(\bt).collect(_.name));


// create some random settings:
g.elementsDict.do(_.value_(1.0.rand));

g.elementsDict.do(_.value_(1.0.rand)); g.getHalo.storeAll(\rnd1);
g.elementsDict.do(_.value_(1.0.rand)); g.getHalo.storeAll(\rnd2);


// make random settings for smaller sets of keys only
g.getHalo.joyKeys.do { |key| g.dictAt(key).value_(1.0.rand) };
g.getHalo.storeAll(\rndJoy1);


g.getHalo.butKeys.do { |key| g.dictAt(key).value_(1.0.rand) };
g.getHalo.storeAll(\rndBut1);

g.addHalo(\recall, { |halo, name| g.setKeysValues(halo.presets[name].postln) });

// restore to initial setting
g.getHalo.recall(\base);

// give all elements an action,
// then set states with doAction
g.elementGroup.action_ { |el| "YO: % %\n".postf(el.name, el.value.round(0.001)) };

// randomly set to one of them
g.setKVAction(g.getHalo.presets.choose);

::
