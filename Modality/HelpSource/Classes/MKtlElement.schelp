CLASS:: MKtlElement
summary:: An element of an MKtl.
categories:: Libraries>Modality
related:: Overviews/Modality, Classes/MAbstractElement, Classes/MKtl

DESCRIPTION::
A named element within an link::Classes/MKtl::, which can typically represent a slider, a button, a joystick axis etc etc. It has a description with a deviceSpec (e.g. \midiNum for a midi faderbox slider), and a type (e.g. \slider). It also has a deviceValue (in the deviceSpec range), and a value (in range 0.0 - 1.0).
It is mostly created automatically when an link::Classes/MKtl:: is made.

CLASSMETHODS::

METHOD:: types
The types of elements used in descs so far:
code::
MKtlElement.types;
// to update after adding more desc files:
MKtlDesc.loadDescs;
MKtlDesc.elementTypesUsed;
::
private:: initClass

METHOD:: new
Creates a new instance, with a name, a description and optionally a source.
code::
x = MKtlElement(\x, (spec: [-100, 100], type: \joyX, ioType: \in));
x.value = 0.42;
x.value
x.deviceValue
::
The source arg is usually an MKtl

INSTANCEMETHODS::

METHOD:: deviceSpec
The spec that maps between the device's numerical value and the the unipolar range in the MKtlElement.

private:: init, setSpecFromDesc, updateDescription

METHOD:: defaultValue
The element's default value


METHOD:: deviceValue
Get and set the element's deviceValue in units and range of the deviceSpec

METHOD:: value
Get and set the element's current value in normalised range

argument:: newval
a Float between 0.0 and 1.0

METHOD:: valueNoSend, deviceValueNoSend
Set the element's deviceValue or value without sending back to the hardware device

METHOD:: valueAction, deviceValueAction
Set the element's deviceValue or value and perform its action.

discussion::

deviceValue_ and value_ will not cause the action to be performed.
deviceValueNoSend_ and valueNoSend_ will also not trigger the action.

If the element is has an output to send back to the device, value_ and deviceValue_ will send the deviceValue to the device, while deviceValueNoSend_ and valueNoSend_ allow just setting the value without sending it (which is sometimes necessary).

Example:
Control a knob on the Behringer BCF2000

code::
// This will send the value to the device, causing the motorised fader to go to that position:
MKtl('bcf1', "behringer-bcf2000");
MKtl('bcf1').elementsDict[\kn_1_1].value_(0.5);
MKtl('bcf1').elementAt(\kn, 1, 1).deviceValue_(64);

// This just sets the value in the MKtlElement:
MKtl('bcf1').elementAt(\kn, 1, 1).valueNoSend_(0.5);
MKtl('bcf1').elementAt(\kn, 1, 1).deviceValueNoSend_(64);
::

METHOD:: addAction

Add an action to the element's action. Adding multiple actions will create a FunctionList.

METHOD:: removeAction

Remove an action from the list of current actions. The action to be removed has to be the exact same function object.

METHOD:: doAction

Perform the actions related to this element. This includes the action instance variable,
and the actions of its parents, up to the containing MKtl.

argument:: sendValue
Whether or not to send the value out to the device if this is an output element.

Method:: enabled
ask whether this element's action is currently enabled
Method:: enable, disable
enable and disable this element's action. works hierarchically in MKtlElementGroup as well:
code::
make a
g = MKtl(\fer, "*run*drive"); g.gui;
g.dictAt(\wheel).action = { |el| [el.name, el.value.round(0.001)].postln };
g.elAt(\wheel).disable;
g.elAt(\wheel).enable;

// set action for bt group and bt_1:
g.elAt(\bt).action = { |el| [\bt, el.name, el.value.round(0.001)].postln };
g.dictAt(\bt_1).action = { "yo, 1!".postln };
// bt1 posts from two actions!
// disable group: bt1 posts its action, not group action
g.elAt(\bt).disable;
// disable bt 1, enable group:
g.elAt(\bt, 0).disable; g.elAt(\bt).enable;
// disable all individual button actions:
g.elAt(\bt).do(_.enable);
::


METHOD:: resetAction

Set action to nil.

METHOD:: asStream
pattern support - convert MKtlElement to a stream

METHOD:: embedInStream
pattern support - embed MKtlElement in a stream.

code::
// examples for direct pattern usage:
MKtlDesc.postLoadable
n = MKtl(\nk1, "korg-nanokontrol");
x = n.elementsDict[\play]; // the play button

// test asStream method - simple endless lookup
p = Pbind(\test, x).trace.play;
// switch value while playing, pattern gets current value
x.value = 1;
x.value = 0;

p.stop;

// test embedInStream method:
(
p = Pbind(
	\test, Pseq([x, 4, 7], 8),
	\dur, 0.5
).trace.play;
)
// change value while playing
x.value = 1;
x.value = 0;

p.stop;
::


METHOD:: elemDesc
An Event or dictionary with a description of the element.
Typically contains a deviceSpec, a type, and

METHOD:: gui
Create a gui for this element.


EXAMPLES::

Sending data back to MIDI device, one should use link::Classes/MAbstractElement#value_:: :

code::
MKtlDesc.postLoadable; // pick one of the supported devices
m = MKtl('bcf', "behringer-bcf2000");
m.gui;
k = m.elementAt(\kn,1,0);
k.value_(0.5);
k.value;
::

Classic knobs rotating demo for B:

code::
(
var x = 0;
fork {
	loop {
		0.1.wait;
		x = x + 0.1;
		8.do { |i|
			var el = m.elementAt(\kn, 1, i);
			var val =  (x + (i/7)).mod(1.0);
			el.value_( val )
		}
	}
}
)

// Lots of tests to show how MKtl work.

// Make one by hand:
x = MKtlElement(\x, (spec: [-100, 100], type: \joyX, ioType: \in));

x.value = 0.42;
x.value
x.deviceValue

x.name
x.type
x.ioType
x.elemDesc;
// change the elemDesc
x.elemDesc_((spec: [100, -100], type: \joyY, ioType: \inout));
x.elemDesc;

// update some entries in the elemDesc
x.updateDescription((spec: [5, 105], type: \joyXYZ));
x.elemDesc;
x.type
x.ioType;

x.deviceSpec_([5, 105] * 2);

x.value_(0.55).value;
x.deviceValue



/// Here is an example for creating a derived MKtlElement:
// this converts values from x and y controls to a polar / angle value.

// this covers github/modality issue #72
// - Adding custom filter elements to an existing MKtlElement

// make elements for x and y dimensions

x = MKtlElement(\x, (spec: [-100, 100], type: \joyX, ioType: \in));
x.action_(MFunc());  // use an MFunc for convenience and flexibility
		// add posting to MFunc
x.action.add(\post, { |el| [el.name, el.value].postln });

x.value_(0.5);
x.valueAction_(0.6);

// same for y dimension
y = MKtlElement(\y, (spec: [-100, 100], type: \joyY, ioType: \in));
y.action_(MFunc());
y.action.add(\post, { |el| [el.name, el.value].postln });

// make a Slider2D to set x and y
Slider2D(nil, Rect(0,0,200,200)).action_({ |sl2d|
    x.valueAction_(sl2d.x); y.valueAction_(sl2d.y);
}).front;

// make a derived element, which converts x and y to polar angle
z = MKtlElement(\polar, (spec: [-pi, pi], type: \xyPolar, ioType: 'filter'));

// x and y trigger z.action
[x, y].do {|el| el.action.add(\toPolar, { z.doAction }) };
[x, y].do { |el| el.action.disable(\post) };

// now define z.action:
z.action = MFunc();
// first add a function to get and and y, and calc its value
z.action.add(\calcAngle, { |polar|
    var xy = [x.deviceValue, y.deviceValue];
    var angle = atan2(x.deviceValue, y.deviceValue);
    // [xy, angle].round(0.001).postln;
    polar.deviceValue_(angle);
});

// then one to do something with it, e.g. post it
// angles: up is 0 deg, right is 0.5pi, down is +-pi, left is -0.5pi

z.action.add(\postAtan2, { |polar|
    "polar atan2 value: % \n".postf(polar.deviceValue);
});

// test pattern support with polar
// - move 2dslider while pattern plays
// this is normalized value -
a = Pbind(\polar, z).trace.play;
a.stop;

// get the angle value from z
a = Pbind(\angle, Pfunc({ z.deviceValue })).trace.play;
a.stop;
::