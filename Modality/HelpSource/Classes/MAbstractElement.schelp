CLASS:: MAbstractElement
summary:: Base class for MKtl controller elements.
categories:: Libraries>Modality, Control
related:: Overviews/Modality, Classes/MKtl, Classes/MKtlElement


DESCRIPTION::
Abstract class for MKtl controller elements and groups. It provides the common interface that individual MKtlElements (which represent single sliders, buttons, etc) and MKtlElementGroups share.

note::This is an abstract class that should usually not be used directly. ::
(Theoretically, one could use MAbstractElement like an MKtlElement without specs.)

CLASSMETHODS::

METHOD:: new
create a new instance, with a name, and the MKtl it will belong to.

private:: addGroupsAsParent

INSTANCEMETHODS::

method:: source
the MKtl the element belongs to.

METHOD:: name
the element's name

METHOD:: type
the type of the element, e.g. code:: \button, \slider, \knob::.
See link::Reference/MKtl_description_files:: for a more detailed list.


private:: init

SUBSECTION:: setting and getting values

METHOD:: value
Get and set the element's value. with MKtlElementGroup, value is the collected values of its element. Note that value_ does not evaluate any action.

argument:: newval
the new value

METHOD:: prevValue
the previous value

METHOD:: valueAction
Set value and evaluate the associated action.

argument:: newval
the new value

METHOD:: doAction
Evaluate the associated action (without changing the value)


SUBSECTION:: Adding and removing functionality

METHOD:: action
Get and set the action to evaluate when element is activated.

METHOD:: addAction
add an action to potentially already present actions

METHOD:: removeAction
remove an action the present list of actions

METHOD:: resetAction, reset
reset element action to nil, i.e. without any actions.


subsection:: Groups

METHOD:: parent
returns the parent group of the element in the code::MKtl:: elements hierarchical structure.

METHOD:: groups
if the element is inside one or more groups, and those groups have an action assigned, they will be returned here.

discussion::
Groups are instances of link::Classes/MKtlElementGroup::.

METHOD:: index, indexInGroup
returns the index (Number) of code::this:: inside its parent group

METHOD:: indices
returns an array of indices that points to code::this:: from the top level of the code::MKtl:: elements hierarchy. These values correspond with link::Classes/MKtl#elAt::

METHOD:: key, keyInGroup
returns the key (Symbol) of code::this:: inside its parent group

METHOD:: keys
returns an array of keys that points to code::this:: from the top level of the code::MKtl:: elements hierarchy. These values correspond with link::Classes/MKtl#elAt::
keys and indices can be mixed, see link::Classes/MKtlElementGroup::.

SUBSECTION:: UGen support

METHOD:: kr
Use the value directly on the server (on a bus).

argument:: server
optional argument that you only have to set once, and only if the server for the bus is not link::Classes/Server#-default::.

returns:: an link::Classes/In#-kr:: holding the current value of this element. Reflects changes of the value.

private:: updateValueOnServer

METHOD:: initBus
initialize the bus on the server.

argument:: server
The server the bus should be instantiated on.
Default value is link::Classes/Server#-default::.

METHOD:: freeBus
frees the bus.

METHOD:: bus
A link::Classes/Bus:: that holds the element's value.

discussion::
Normally, you should just reference to this bus via the link::#-kr:: which will also take care of creating the bus when needed.


SUBSECTION:: Tagging


Tagging allows adding tags to controller elements.
The tagging system is flat, i.e. only elements have tags, link::Classes/MKtlElementGroup:: (and its derivatives) do not - it forwards tagging requests to its children.

code::
m = MKtl(\nk, "*nanokontrol2")

// add a tag
m.elAt(\sl, 0).addTag(\a);
m.elAt(\sl, 0).tags
m.elAt(\sl, 0).tags; // retrieve it

// add several tags at once
m.elAt(\sl, 0).addTag([\freq, \amp]);
m.elAt(\sl, 0).tags; // retrieve it

// remove a tag
m.elAt(\sl, 0).removeTag(\a);
m.elAt(\sl, 0).tags; // retrieve it

// add tags to specific elements
m.elAt(\sl, [0, 1, 2, 4]).do(_.addTag(\vol));
m.elAt(\kn, [0, 1, 2, 4]).do(_.addTag(\vol));

// add tag to all elements of a group
m.elAt(\sl).addTag(\allSliders);


// return tags used in a group, hierarchically
m.elementGroup.flat.collect(_.tags).select(_.notEmpty).printAll; ""

// return all tags used in that group
m.elAt(\sl).tags;


// all elements containing the tag \vol
a = m.elementGroup.elementsForTag(\vol);

// their indices
a.collect {|el| el.indices};

// create an MKtlElementGroup containing all vol elements
MKtlElementGroup(
	m,
	\myVolumes,
	m.elements.elementsForTag(\vol)
).gui;


// remove a tag from all elements in a group
m.elAt(\sl).removeTag(\vol);
m.elAt(\sl).collect(_.tags);

// clear all tags
m.elAt(\sl, 0).clearTags
::


METHOD:: tags
all tags of this element.
returns::
list of Symbols

discussion::
If code::this:: is an link::Classes/MKtlElementGroup::, it returns a combined list of all tags of its child elements.


METHOD:: addTag
add tags to the element
argument:: ... newTags
list of Symbols

discussion::
If code::this:: is an link::Classes/MKtlElementGroup::, it forwards this call to its child elements.


METHOD:: removeTag
remove tags from the element
argument:: ... newTags
list of Symbols

discussion::
If code::this:: is an link::Classes/MKtlElementGroup::, it forwards this call to its child elements.

METHOD:: includesTag
searches for specific tag
argument:: ... tag
list of Symbols
returns::
true, if all tags specified in the argument are found, otherwise false.

discussion::
If code::this:: is an link::Classes/MKtlElementGroup::, it forwards this call to its child elements.

METHOD:: clearTags
wipes all tags from the element

discussion::
If code::this:: is an link::Classes/MKtlElementGroup::, it forwards this call to its child elements.

private:: asBaseClass, asStream, collectives, deviceValue, deviceValueAction, deviceValueNoSend, disable, elemDesc, embedInStream, enable, enabled, flat, getSpec, hasOut, indexInGroup, ioType, isOn, key, keyInGroup, lastUpdateTime
private:: prAddCollective, prAddGroup, prRemoveCollective, prRemoveGroup, prevDeviceValue, removeAction, resetAction, timeSinceLast, trySend, updateBus, updateTime, valueNoSend