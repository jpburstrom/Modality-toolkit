TITLE:: HIDMKtlDevice
summary:: The Modality class for creating and accessing external hid controllers
categories:: Libraries>Modality, External Control
related:: Overviews/Modality, Classes/MKtl, Classes/MKtlDevice, Classes/MKtlElement

DESCRIPTION::
HIDMKtlDevice provides an internal interface for HID devices you can connect to your computer.
Note:: Usually, you never access the HIDMKtlDevice itself, as the MKtl that contains it (its parent MKtl) is the main code interface.::

When looking for available devices with code::MKtl.find(\hid)::,
HIDMKtlDevice searches for connected controllers, and returns a list of available devices.

When creating an MKtl by desc name, e.g. code::MKtl(\x, "*drive");::, HIDMKtlDevice try to find the matching HID in the list of available devices and return it. If it does not find it, e.g. because the physical controller is not there, it will return nil.
In that case, the MKtl will be virtual, meaning it has no device, and you can still work with it, because it can open a GUI that can replace the controller.

For most devices, this requires that someone has already made a description file for the device; if there is none, it is easy to make one following the instructions here:
link::Tutorials/How_to_create_a_description_file::

More general info can be found in link::Classes/MKtl:: and link::Classes/MKtlDevice:: .


CLASSMETHODS::

private:: initialized

METHOD:: deviceProductNamesToHide, devicesToShow
On OSX, some devices show up as HID that will cause system crashes when opened. these devices can be excluded from MKtl for safety.

METHOD:: showAllDevices
a flag whether to show risky devices or not.

METHOD:: find
Find all currently connected HID devices.

argument:: post
Whether or not to post about the found HID devices.


METHOD:: postPossible
Post all access code for device that could be used by name.


METHOD:: protocol
protocol name, \hid.


METHOD:: initDevices
Look for available HID devices.

argument:: force
Whether or not to do this again if it was already done before.

METHOD:: makeDeviceName
Convenience method to create a device name from the information from link::Classes/HIDInfo:: for idInfo lookup.

METHOD:: getIDInfoFrom
get the idInfo string from a HIDInfo object.


METHOD::new

Creates a new instance of HIDMKtlDevice.

argument:: name
The short name of the controller as it shows up in the list of found devices.

argument:: path
The path of the device to open (optional).

argument:: parentMKtl
The instance of link::Classes/MKtl:: that this MKtlDevice will belong to.

argument:: multiIndex
When using multiple identical devices, the index which one to use.


INSTANCEMETHODS::

private:: initHIDMKtl, initCollectives, cleanupElementsAndCollectives
private:: checkAllCtls, sendSpecialMessage, hidElemDict, hidElemFuncDict

METHOD:: enable, disable
enable or disable this device.

METHOD:: enabled
a boolean whether device is currently enabled.

METHOD:: enableElement, disableElement
enable or disable an element in the device by name.

METHOD:: source
The link::Classes/HID:: device that is the source of this HIDMKtlDevice.

METHOD:: srcID
The uid of the source.

METHOD:: closeDevice
Close the device and clean up anything that it used.


METHOD:: explore
When opening a device that is not known yet by MKtl, you may want to explore the device. See the tutorial link::Tutorials/How_to_create_a_description_file::.

ARGUMENT:: bool
a flag to turn exploring on or off.

METHOD:: exploring
the flag whether the device is currently being explored or not.

METHOD:: createDescriptionFile
Create and open a description file for this MKtlDevice, after exploring it.

METHOD:: initElements
Initialize all elements and hook them up to the hardware elements.

METHOD:: send
Send the value of an element to this HID device; called if you set the value of an MKtlElement that is an output.

argument:: key
The key of the element.

argument:: val
The value to which the element is to be set.
