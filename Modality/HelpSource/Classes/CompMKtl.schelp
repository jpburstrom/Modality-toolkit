TITLE:: CompMKtl
summary:: create composite MKtls
categories:: Modality
related:: Overviews/Modality, Classes/MKtl

DESCRIPTION::
CompMKtl allows combining MKtls into a single MKtl which contains the elements of all these MKtls. For playing interfaces consisting of technically separate devices, it may semantically make sense to merge them into a single MKtl, so one
create groups of elements that belong together.
CompMKtl is not fully incomplete, so this file also contains tests and design questions.


First code examples:

code::
// make some component MKtls, then combine them

MKtl(\gpd, "*impact*").gui;  // a gamepad

MKtl(\nk2a, "*nanokontrol2").gui;

MKtl(\nk2b, "*nanokontrol2").gui;

MKtl(\gyro, "gyrosc_ga").gui;  // phone app with gyro and accel

// combine two identical devices into one:
a = CompMKtl(\combi, [\nk2a, \nk2b]);
// the MKtls become names in the elementGroup
a.mktlDict;
a.mktlNames;
a.elementGroup;
// access nanoktl at 0, sl 5
a.elAt(0, \sl, 5);
a.elAt(1, \sl, 6);

// array of all sliders of both nk2s
a.elAt(\all, \sl);

// lookup by mktl name :
a.elAt(\nk2b, \sl, 7);

// add some actions:
a.elAt(0, \sl).action = { \yoA_slider.postln };
a.elAt(1, \sl).action = { \yoB_slider.postln };




// combine two different devices:
b = CompMKtl(\ng, [\nk2a, \gpd]);
b.elAt(0);
b.elAt(1, \joy).action = { |el| [el, el.value.round(0.001)].postln; };

b.elAt(\nk2a, \tr, \play).action = { \but_kik.postln };
b.elAt(\gpd, \joy).value;


// two different ones
c = CompMKtl(\gpgy, [\gpd, \gyro]);
c.elementGroup;
c.elAt(1);
c.elAt(0);
c.elAt(\gyro, \accel, \x);


// and make one with 3 devices
d = CompMKtl(\ngg, [\nk2a, \gpd, \gyro]);
d.elementGroup;
d.elAt(0, \rew);
d.elAt(1, \bt, 0);
d.elAt(2, \gyro, \pitch);

d.elAt(\nk2a, \rew);
d.elAt(\gyro, \gyro, \pitch);
d.elAt(\gpd, \bt, 0);


// test flattening elementGroups:

// two nanokontrols: cannot flatten into a single ElementGroup,
// because the two groups have the same element/group-names:
a.elementGroup.canFlatten;

// nanokontrol and gamepad: no luck, both have \bt elements
b.elementGroup.canFlatten;

// gamepad and gyro - yes!
c.elementGroup.canFlatten;
c.elementGroup;
// so do it:
c.flattenElementGroup;
c.elementGroup; // now elementGroup has the groups from

// lookup by index
c.elAt(1);
// and by name
c.elAt(\joy);
c.elAt(\accel, \x);


::

Question:
How much and what of the MKtl interface should CompMKtl support or pass through?

CLASSMETHODS::

METHOD:: all
dict for all CompMKtls

private:: initClass

METHOD:: new
make a new MKtl with a name, and the names of existing MKtls


INSTANCEMETHODS::

METHOD:: name
This CompMKtl's name and also its key in .all

METHOD:: mktlNames
The names of the composed MKtls

METHOD:: mktlDict
A dict with the MKtls

METHOD:: elementGroup
The elementGroup containing all elements

METHOD:: elementAt
look up element as in MKtl

METHOD:: elAt
like elementAt, but returns nil when find fails.

METHOD:: flattenElementGroup
flattens the elements in the top level group if possible.

private:: init
