TITLE:: HIDExplorer
summary:: explore an HID device for use with the Modality toolkit
categories:: Libraries>Modality
related:: Overviews/Modality, Classes/MKtl, Reference/MKtl_description_files, Classes/MIDIExplorer

DESCRIPTION::
This class helps you to create a description file for an HID device.

code::
// open an HID device
MKtl( 'x', "*drive" );
// create a desc file doc from what HID reports
MKtl( 'x' ).createDescriptionFile;

// or by observation:
HIDExplorer.start(MKtl( 'x' ).device.source);
// ... now move all controllers thru their full range ...

// then do:
HIDExplorer.stop(MKtl( 'x' ).device.source);
MKtl( 'x' ).device.openDoc;
::


The file will have a dictionary that can be saved as a description file.
It contains a device idInfo, the protocol (here, \hid), and the elements
in a flat array consisting of lines like this:

code::
// --------- input elements ----------
'<_b1_>': ('hidUsage': 1, 'hidUsagePage': 9, 'type': '<type Button>', 'ioType': 'in' ),
::

Here you give a proper name to: code::'_b1_':: to e.g. code::'bt1'::, based on the number that is written on the button - this is the name that will be used to refer to the element.

Then you also need to edit the type: code::'<type Button>':: to code::'button'::, and similar for other element types - see other HID device desc files for examples.

Note that often elements can be grouped in meaningful order, e.g. gamepads have 12 or so number buttons, which can be put into one array with shared properties - see e.g.
code::
MKtlDesc("*drive").openFile;
::

The other items in each line are lookup info for the MKtl, so you should not change them.

Check link::Reference/MKtl_description_files:: for the format of the description files.


CLASSMETHODS::

private:: compileFromDevice, openDocFromDevice, compileFromObservation

METHOD:: start, stop
start abd stop observing an HID device

METHOD:: openDoc
open a document of the currently observed data, optionally including parameter specs.

METHOD:: verbose
get and set flag whether to post info
METHOD:: trace
get and set flag whether to post tracing info, default flag is true



private:: allMsgTypes, detectDuplicateElements, exploreFunction, observeDict, observedSrcDev, prepareObserve, resps, results, specMap, stringFor, updateRange
