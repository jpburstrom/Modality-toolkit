TITLE:: PagedMKtl
summary:: polyphonic control and paging for MKtls
categories:: Undocumented classes
related:: Overviews/Modality, Classes/MKtl


DESCRIPTION::
In Modality, one can have several MKtls for the same device, and switch between them, like hardware controller pages. One can also activate them polyphically if desired, e.g. to control multiple similar processes from the same gestures.

A PagedMKtl lets one make such pages for a single physical controller.
It has a dict of several MKtls, which are all controlled from the same physical interface. Paging to one contained MKtl enables it, and disables all other pages/mktls.

Note::
Due to the current implementation of HIDMKtlDevice, all MKtls will  point to the same instance of HIDMKtlDevice.
::

First code examples:

code::
// MIDI - Attach a single nanoKontrol2 first if you have one, then find it:
MKtl.find(\midi);

// Make some MKtls which point to the same device
MKtl('ada', "korg-nanokontrol2");
MKtl('bob', "korg-nanokontrol2");
MKtl('cyc', "korg-nanokontrol2");

p = PagedMKtl(\nk2, [\ada, \bob, \cyc]);

// now give each one a different action for the rew button
MKtl('\ada').elAt(\tr, \rew).action_({ "rew page ada".postln });
MKtl('\bob').elAt(\tr, \rew).action_({ "rew page bob".reverse.postln });
MKtl('\cyc').elAt(\tr, \rew).action_({ "rew page cyc".scramble.postln });

// now hit the rew button - all three are active!

p.page(\ada);  // hit rew
p.page(\bob);  // again
p.page(\cyc);  // and again

p.up.currPage;  //
p.down.currPage;  //
p.down.currIndex;  //

// HID - create two MKtls for a gamepad:

MKtl.find(\hid);
// make two Mktls for a saitek gamepad
g = MKtl('g', "*impact*gamepad");
i = MKtl('i', "*impact*gamepad");

// they will point to the same HID device!
g.device.source === i.device.source;
g.device.source.id;

// set an action for all elements of g
g.elAt.action = { |el ... groups| [el.source, el.name, el.value.round(0.001)].postln };
i.elAt.action = { |el ... groups| [el.source, el.name, el.value.round(0.001)].postln };
g.gui; i.gui;

// press some buttons - actions of both MKtls will run and post:
[ MKtl('g'), joy_r_y, 0.506 ]
[ MKtl('i'), joy_r_y, 0.506 ]

// add an action for button 1
g.elAt(\bt, \1).action = { "ONE!".postln };
i.elAt(\bt, \1).action = { "ENO?".postln };

// switch between the two by hand
g.enable; i.disable;
i.enable; g.disable;

// make a third one, then turn the three into a PagedMKtl
MKtl('h', "*impact*gamepad");
MKtl('h').elAt.action = g.elAt.action;
MKtl('h').elAt(\bt, \1).action = { "T W O".postln };
p = PagedMKtl(\impact, ['g', 'h', 'i']);

// activate one at a time, add try using it after each one
p.page(\g);
p.page(\h);
p.page(\i);

// enable/disable all 3 at the same time:
p.mktlDict.do(_.enable);
// all off
p.mktlDict.do(_.disable);

::

CLASSMETHODS::

METHOD:: all
all PagedMktls by name.

private:: initClass

METHOD:: new
make a paged MKtl
argument:: name
name for the PagedMKtl
argument:: mktlNames
an array of names of MKtl names which already exist, and which are usually all controlled from the same physical interface.
argument:: pageNames
an optional list of names for the pages, which can be different from the MKtl names.

INSTANCEMETHODS::

private:: init

METHOD:: name
the name of the PagedMKtl

METHOD:: mktlDict
the dict of mktls used as pages

METHOD:: pageNames
get the list of pageNames

METHOD:: currMktl
get currently active MKtl/page
METHOD:: currPage
get the currently active page name
METHOD:: currIndex
get the index of the currently active page name

METHOD:: up, down
step pages by + 1 / -1

METHOD:: page
page to a name or index


METHOD:: pageByIndex
argument:: index
argument:: wrap

METHOD:: pageByName
argument:: pageKey

METHOD:: allOff
turn all pages off
