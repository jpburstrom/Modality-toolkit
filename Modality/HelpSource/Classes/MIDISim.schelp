TITLE:: MIDISim
summary:: a class to simulate input from MIDI controllers
categories:: Modality
related:: Overviews/Modality, Classes/MKtl, Classes/MIDIMKtlDevice, Classes/MIDIIn, Classes/MIDIClient

DESCRIPTION::
MIDISim is intended for testing controller setups without requiring the device to be there. It can create any kind of midi message, thus simplifying the development and automatic testing of complex controller setups. It uses an Event which is passed through so it can be used in Patterns as well.


code::
MIDISim.value((midiMsgType: \control, numbers: [0,0,64]));
MIDISim.((midiMsgType: \touch, numbers: [0, 80]));

::

CLASSMETHODS::

METHOD:: value
This method creates a MIDIIn event, based on the event given.

ARGUMENT:: ev
code::
// control, noteOn, noteOff, polytouch expect 3 values:
// midiChan, midiNum, midiValue
(midiMsgType: \control, numbers: [midiChan, midiNum, midiValue]);

// channel-only messages like touch, bend, program expect 2 values:
(midiMsgType: \touch, numbers: [midiChan, midiValue]);
::

METHOD:: noteOn, noteOff
METHOD:: control, polytouch
METHOD:: touch, bend, program
METHOD:: status
These methods are redirected to MIDIIn methods.

EXAMPLES::
code::

MIDISim.value((midiMsgType: \control, numbers: [0,0,64]));
MIDISim.((midiMsgType: \noSuchMsg, numbers: [0,0,64]));

Tdef(\spoof, {
	loop {
		MIDISim.value((
			\midiMsgType: \control,
			// varying ccnums, single control value
			\numbers: [0, { rrand(10, 24) }, 64]
		));
		0.5.wait;
	};
}).play;

// test all the elements of a device
// device has to be phyiscally present!
MKtl.find(\midi);
m = MKtl('lpd', "akai-lpd8");
m.elAt.action = { |el| el.postln };

(
Tdef(\spoof, {
	// play five events for every element
	m.elementsDict.do { |elem|
		var desc = elem.elemDesc;
		var midiChan = desc[\midiChan];
		var midiNum = desc[\midiNum];
		var msgType = desc[\midiMsgType];
		if (msgType == \cc) { msgType == \control };

		5.do {
			MIDISim.value((
				\midiMsgType: msgType,
				\numbers: [midiChan, midiNum, rrand(0, 127)]
			).postcs);
			0.5.wait;
		};
	};
}).play;
)

::
