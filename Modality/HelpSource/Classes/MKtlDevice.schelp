TITLE:: MKtlDevice
summary:: A class to provide a common interface for accessing external controllers
categories:: Libraries>Modality, External Control
related:: Classes/MKtl, Overviews/Modality

DESCRIPTION::
MKtlDevice is an abstract interface to access an external device, e.g. a MIDI device such as a MIDI fader box, an HID device such as a joystick, and so on.

Subclasses of MKtlDevice take care of accessing the device with the proper protocol.

This class is used mainly internally by link::Classes/MKtl::.


CLASSMETHODS::
private:: basicNew, initClass

METHOD:: allProtocols
all protocols supported in Modality
code::
MKtlDevice.allProtocols.cs
::

METHOD:: find
Find out which devices are attached.

ARGUMENT:: protocols
Optional argument to specify the protocols to look for, e.g. code::[ 'hid' ]::. If not specified it will look for all protocols that are implemented as subclasses.
ARGUMENT:: post
flag to post results or not.

code::
MKtl.find;
MKtl.postPossible(\midi);
// returns list of all currently available midi devices
::


METHOD:: initHardwareDevices
Look for available connected hardware devices.

ARGUMENT:: force
Whether or not to look again if it was already done before.

ARGUMENT:: protocols
which protocols to look for.


METHOD:: open
Tries to open a device with the given name.

ARGUMENT:: name
The short name of the device that you want to open.

ARGUMENT:: parentMKtl
The instance of MKtl that will refer to this device.

ARGUMENT:: multiIndex
when multiple identical devices are present, the index of the device to open.

returns:: either an instance of MKtlDevice, or nil if no device was found.


METHOD:: subFor
Return the subclass that matches the protocol given.

ARGUMENT:: protocol
The protocol to look for, e.g. code::\midi:: or code::\hid::.

returns:: a subclass of MKtlDevice

code::
MKtlDevice.subFor( \hid );
// returns: HIDMKtlDevice
::


METHOD:: protocol
The protocol of this subclass of MKtlDevice

returns:: a Symbol


INSTANCEMETHODS::

private:: init

METHOD:: mktl
The MKtl that this MKtlDevice belongs to.

returns:: an instance of MKtl.


METHOD:: name
The short name of the device.

returns:: a Symbol

METHOD:: deviceName
The full device name of the device.

returns:: a String



METHOD:: closeDevice
Close the device and clean up anything that it used.


METHOD:: trace
Print incoming data from the MKtlDevice or not.

argument:: bool
a Boolean whether it should be on or off.

METHOD:: traceRunning
a Boolean whether or not the MKtlDevice is currently tracing.


METHOD:: explore
When opening a device that is not known yet by MKtl, you want to explore the device. See for a full tutorial: link::Tutorials/How_to_create_a_description_file::

ARGUMENT:: bool
a Boolean to turn this on or off.

METHOD:: exploring
a Boolean whether or not the device is currently being explored.


METHOD:: createDescriptionFile
Create and open a description file for this MKtlDevice, after exploring it.



METHOD:: initElements
Initialize all elements and hook them up to the hardware elements.

METHOD:: initCollectives
Initialize all collectives and hook them up to the hardware elements.

METHOD:: cleanupElementsAndCollectives
De-initialize all elements and collectives.
