TITLE:: MIDIMonitor
summary:: monitor MIDI input
categories:: Utilities
related:: Overviews/Modality, Classes/MKtl, Classes/MIDIExplorer, Classes/MIDIIn, Classes/MIDIClient, Classes/OSCMon, Classes/HIDExplorer

DESCRIPTION::
MIDIMonitor records all midi input and sorts it into a msgTree. This can be used to determine which messages a given controller is actually sending, so one can automatically make descriptions of its elements.

First code examples:

code::
MIDIMonitor.start;
// now hit all keys from soft to hard,
// move all sliders and knobs from min to max,
// .....
MIDIMonitor.trace(false); // turn off posting (verbose)
MIDIMonitor.trace; // or maybe back on

/// then:
MIDIMonitor.postTree;
MIDIMonitor.msgTree.keys; // the srcIDs
MIDIMonitor.srcAt(0);	// get a specific input
MIDIMonitor.msgTypes(0);		// get all msgTypes from a specific input
MIDIMonitor.msgTypes(1);		// get all msgTypes from a specific input

	// all midi entries from source at index:
	// type, chan, [num], valueRange
MIDIMonitor.treeAt(1);
	// all noteOn entries - chan, [num, ] valueRange
MIDIMonitor.treeAt(1, \noteOn);
MIDIMonitor.treeAt(1, \noteOn).keys(SortedList); // the chans
// all noteOn entries on one chan, valueRange [min, max]
MIDIMonitor.treeAt(1, \noteOn, 0);
	// all keys used
MIDIMonitor.treeAt(1, \noteOn, 0).keys(SortedList);
	// valueRange for \noteOn, chan, noteNum
MIDIMonitor.treeAt(1, \noteOn, 0, 57);

::

CLASSMETHODS::


METHOD:: chanNumMsgTypes, chanMsgTypes, allMsgTypes
The midi message types MIDIMonitor can look for

METHOD:: start
start monitoring
METHOD:: stop
stop monitoring
METHOD:: monitoring
flag whether monitoring is on

METHOD:: verbose, trace
turn verbose on and off

METHOD:: msgTree, postTree
monitoring results are collected here and can be pretty-posted

METHOD:: treeAt
deep lookup method

METHOD:: sources
METHOD:: srcAt
METHOD:: msgTypes
METHOD:: midiNumsAt
lookup methods

METHOD:: indexForSrcID
get the index in MIDIIn.sources for a given source uid

private:: monitorFuncs, init, checkIns, sysIndices

