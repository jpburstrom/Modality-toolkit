/*********

4 steps towards redefining .desc.scd files:

1. An example for a simple desc file (LPD8) with comments

2. the general info section in full detail

3. the entire elementsDesc in full detail

4. the single elementDesc in full detail

*********/

// 2. the general info section in full detail

// ------ snip here ----

/* Example: AKAI LPD8 Laptop Pad controller */

(
/* deviceName: recommended
	user-readable name for the device or source
	recommended naming:
	MIDI - deviceName as registered by MIDI system
	HID  - <productName>_<vendorName>, as generated by HID
	OSC  - the name of the app or product represented in the desc.
		if device messages start with app name as prefix,
		e.g. /gyrosc, use that as deviceName.
*/
deviceName: "LPD8",


/* protocol: required
	simple MKtls can only have a single protocol.
	Must be one of the supported MKtl protocols:
MKtlDevice.allProtocols.postcs;
MKtlDevice.allProtocols;
-> [ 'hid', 'midi', 'osc' ]
*/
protocol: \midi,

/* deviceType:: recommended
	user-readable name for the type of this device or source.
	Typically this is one of:
MKtlDevice.deviceTypes.postcs; // <- in desc_redef branch
->
*/
deviceType: \drumpad,


/* elementTypes: recommended
	user-readable collection of names of the elements
	this MKtl contains. Typically this is one of:
MKtlElement.types.postcs;
->
*/
elementTypes: [\pad, \knob], 	// several of MKtl.elementTypes


/* status: recommended
	user-readable text on how complete and how fully tested
	this desc/device is on different platforms (osx, linux, win)
->
*/
status: (
	osx: "tested and working",
	linux: "complete, untested",
	win: "unknown"
),

/*** autogenerated when reading in a desc file: ******/
/* filename: the file basename as found in some MKtDesc.folder */
filename: "akai-lpd8",
/* filepath: the full path to the file, e.g. */
filepath: "~/git/Modality-toolkit/Modality/MKtlDescriptions/akai-lpd8.desc.scd",



/* idInfo: this is technical info used to identify device */
// lots of different cases:

	// HID: idInfo is like deviceName, <productName>_<vendorName>,
	// as created by HID
idInfo: "Run'N' Drive Wireless_Thrustmaster",

	// MIDI idInfo for single port device is the same as deviceName:
idInfo: "LPD8",

	// MIDI idInfo for multiport devices:
// a dict with (deviceName: "<devname>", sourcePortIndex: n, destPortIndex: n)
idInfo: (deviceName: "QuNexus", sourcePortIndex: 0, destPortIndex: 0),

// in this case, we recommend also specifying the port name:
portName: "Port 1",

	// mostly MIDI - if there are hardware pages / presets,
	// as in the korg nanokontrol, or the QuNexus keyboard,
	// please specify them:
hardwarePages: [\A, \B, \C, \D],

// if this desc refers to a single hardware page/preset,
// please specify which one:
pageName: \B,

/* deviceInfo:  user-readable text info on the device */

	// user-readable text info on the device,
	// can have entries ad-lib - these are recommended:
deviceInfo: (
	vendorURI: "http://www.akaipro.com/product/lpd8",
	manualURI: "http://www.akaipro.com/product/lpd8#downloads",
	description: "a basic drumpad controller", // one line text
	features: [
		"8 velocity-sensitive pads",
		"8 knobs"
	],
	notes: "use only recommended hardware mode PAD.",
),


/* specs: a dict of named specs for use in the the elements in this desc/MKtl */
// should be an array of params, or a symbol, to be created with .asSpec
// some specs are also provided in MKtl.globalSpecs
specs: (
	'sevenSteps': [0, 6, \lin, 1, 0],
	'disorder': \bipolar // lookup in spec.specs
),


/* collectives: should move to elementsDesc */

/* elementsDesc: see desc_file_redef_3 for full details! */
elementsDesc: (
	info: (anyKey: "anyStrings"),
	sharedProperties: (midiChan: 0),
	deviceIOGroups: (),

	elements: [
		\kn -> (
			sharedProperties: (elementType: \knob, midiMsgType: \control),
			elements: [
				\1 -> (midiNum: 1),
				\2 -> (midiNum: 2)
			]
		),
		\pad -> (
			sharedProperties: (elementType: \pad, midiMsgType: \noteOnOff),
			// ...
			elements: [
				\1 -> (midiNum: 36),
				\2 -> (midiNum: 37),
				// ...
			]
		)
	]
),

/* specialMessages: a dict of special messages to send to the device */
// some devices can be configured by sending them messages,
// e.g. OSC messages to enable control of values and LEDs - see Manta,
// or sysex messages to activate LED control - see nanokontrol2

specialMessages: (
	// in OSC, they could  have any name:
	hyperSpeed: [
		['/ledControlOn', [1, 2, 3]],
		['/abracadabra', [\r, \g, \b]]
	],
	activateImprobabilityDrive: [
		['/setProb', 1e-42],
		['/startTime', \now]
	],
	// in MIDI, they look like this:
	midiMessage: [
		[\sysex, ["... hex numbers ..."]],
		[\sysex, ["... hex numbers ..."]],
		[\sysex, ["... hex numbers ..."]]
	]
)

)
